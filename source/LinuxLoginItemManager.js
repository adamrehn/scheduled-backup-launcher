/*
//  Scheduled Backup Launcher
//  Copyright (c) 2011-2015, Adam Rehn
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//  SOFTWARE.
*/
var fs = require('fs');

function LinuxLoginItemManager(readyHandler)
{
	this.xprofileLoc  = process.env['HOME'] + '/.xprofile';
	this.xprofileData = '';
	this.loginRounds  = [];
	
	//If the .xprofile file exists, parse it
	var that = this;
	fs.readFile(this.xprofileLoc, {'encoding':'utf8'}, function (err, data)
	{
		if (err === null && data.length > 0)
		{
			//Isolate the lines that represent backup rounds
			var backupRoundRegex = /\# Scheduled Backup Launcher Round (.+)$/;
			var lines = data.split('\n');
			lines.forEach(function(line, index)
			{
				var match = line.match(backupRoundRegex);
				if (match !== null)
				{
					//Record the backup round number
					that.loginRounds.push( match[1] );
				}
				else
				{
					//Preserve any lines not generated by us
					if (index != lines.length - 1 || line.length > 0) {
						that.xprofileData += line + '\n';
					}
				}
			});
		}
		
		readyHandler();
	});
}


//Retrieves the list of rounds currently scheduled as login items
LinuxLoginItemManager.prototype.getLoginRounds = function() {
	return this.loginRounds;
}

//Clears the list of rounds to run at login
LinuxLoginItemManager.prototype.removeExistingItems = function() {
	this.loginRounds = [];
}

//Adds a round to the list of rounds to run at login
LinuxLoginItemManager.prototype.addItem = function(roundNum) {
	this.loginRounds.push(roundNum);
}

//Commits the list of login rounds to the filesystem
LinuxLoginItemManager.prototype.commitChanges = function(handler)
{
	//Generate the .xprofile lines for each scheduled backup round
	var linesForRounds = this.loginRounds.map(function(roundNum) {
		return '("' + remote.process.argv[0] + '" ' + roundNum + ') & # Scheduled Backup Launcher Round ' + roundNum;
	});
	
	//Write the updated data to file
	fs.writeFile(this.xprofileLoc, this.xprofileData + linesForRounds.join('\n'), function(err) {
		handler(err);
	});
}

module.exports = LinuxLoginItemManager;